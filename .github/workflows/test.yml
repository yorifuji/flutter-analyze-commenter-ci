name: test

run-name: test

on: pull_request

permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write

jobs:
  ubuntu-main:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ startsWith(github.head_ref, 'test/ubuntu-latest/main') }}
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable

      - run: flutter pub get

      - run: flutter analyze --write=flutter_analyze.log || true

      - uses: yorifuji/flutter-analyze-commenter@main
        if: ${{ !cancelled() }}
        with:
          analyze_log: flutter_analyze.log
          verbose: true

  ubuntu-develop:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ startsWith(github.head_ref, 'test/ubuntu-latest/develop') }}
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable

      - run: flutter pub get

      - run: flutter analyze --write=flutter_analyze.log || true

      - uses: yorifuji/flutter-analyze-commenter@develop
        if: ${{ !cancelled() }}
        with:
          analyze_log: flutter_analyze.log
          verbose: true

  ubuntu-v1:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ startsWith(github.head_ref, 'test/ubuntu-latest/v1') }}
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable

      - run: flutter pub get

      - run: flutter analyze --write=flutter_analyze.log || true

      - uses: yorifuji/flutter-analyze-commenter@v1
        if: ${{ !cancelled() }}
        with:
          analyze_log: flutter_analyze.log
          verbose: true

  macos-main:
    runs-on: macos-latest
    timeout-minutes: 30
    if: ${{ startsWith(github.head_ref, 'test/macos-latest/main') }}
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable

      - run: flutter pub get

      - run: flutter analyze --write=flutter_analyze.log || true

      - uses: yorifuji/flutter-analyze-commenter@main
        if: ${{ !cancelled() }}
        with:
          analyze_log: flutter_analyze.log
          verbose: true

  macos-develop:
    runs-on: macos-latest
    timeout-minutes: 30
    if: ${{ startsWith(github.head_ref, 'test/macos-latest/develop') }}
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable

      - run: flutter pub get

      - run: flutter analyze --write=flutter_analyze.log || true

      - uses: yorifuji/flutter-analyze-commenter@develop
        if: ${{ !cancelled() }}
        with:
          analyze_log: flutter_analyze.log
          verbose: true

  macos-v1:
    runs-on: macos-latest
    timeout-minutes: 30
    if: ${{ startsWith(github.head_ref, 'test/macos-latest/v1') }}
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable

      - run: flutter pub get

      - run: flutter analyze --write=flutter_analyze.log || true

      - uses: yorifuji/flutter-analyze-commenter@v1
        if: ${{ !cancelled() }}
        with:
          analyze_log: flutter_analyze.log
          verbose: true

  windows-main:
    runs-on: windows-latest
    timeout-minutes: 30
    if: ${{ startsWith(github.head_ref, 'test/windows-latest/main') }}
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable

      - run: flutter pub get

      - run: flutter analyze --write=flutter_analyze.log || true

      - uses: yorifuji/flutter-analyze-commenter@main
        if: ${{ !cancelled() }}
        with:
          analyze_log: flutter_analyze.log
          verbose: true

  windows-develop:
    runs-on: windows-latest
    timeout-minutes: 30
    if: ${{ startsWith(github.head_ref, 'test/windows-latest/develop') }}
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable

      - run: flutter pub get

      - run: flutter analyze --write=flutter_analyze.log || true

      - uses: yorifuji/flutter-analyze-commenter@develop
        if: ${{ !cancelled() }}
        with:
          analyze_log: flutter_analyze.log
          verbose: true

  windows-v1:
    runs-on: windows-latest
    timeout-minutes: 30
    if: ${{ startsWith(github.head_ref, 'test/windows-latest/v1') }}
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable

      - run: flutter pub get

      - run: flutter analyze --write=flutter_analyze.log || true

      - uses: yorifuji/flutter-analyze-commenter@v1
        if: ${{ !cancelled() }}
        with:
          analyze_log: flutter_analyze.log
          verbose: true

  ubuntu-main-danger:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ startsWith(github.head_ref, 'danger/ubuntu-latest/main') }}
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable

      - run: flutter pub get

      - name: Install matcher
        run: echo "::add-matcher::.github/analyzer-problem-matcher.json"

      - name: Run flutter analyze
        shell: bash
        run: |
          flutter analyze | tee ./flutter_analyze_report.txt

      - name: Remove matcher
        if: always()
        run: echo "::remove-matcher owner=dart-analyzer::"

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        if: always()
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Run danger to add comments to PullRequest
        uses: MeilCli/danger-action@v5
        if: always()
        with:
          plugins_file: ".github/Gemfile"
          install_path: "vendor/bundle"
          danger_file: ".github/Dangerfile"
          danger_id: "danger-pr"
        env:
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
